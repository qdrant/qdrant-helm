{{- $root := . }}
{{- $namespace := .Release.Namespace }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "qdrant.fullname" . }}-test-db-interaction"
  labels:
    {{- include "qdrant.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: test-script
      image: registry.suse.com/bci/python:3.11
      args: ['bash', '/app/entrypoint.sh']
      volumeMounts:
        - mountPath: /app
          name: test-script
  volumes:
    - name: test-script
      configMap:
        name: "{{ include "qdrant.fullname" . }}-test-db-interaction"
  restartPolicy: Never
  serviceAccountName: {{ include "qdrant.fullname" . }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "qdrant.fullname" . }}-test-db-interaction"
  labels:
    {{- include "qdrant.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
data:
  entrypoint.sh: |
    #!/bin/bash
    set -xe
    zypper install -y python311-dbm
    pip3 install qdrant-client=={{ .Chart.AppVersion }}
    python3 /app/test.py
  test.py: |
    from qdrant_client import QdrantClient
    from qdrant_client.http.models import Distance, VectorParams
    from qdrant_client.http.models import PointStruct

    {{- range .Values.service.ports }}
    {{- if eq .name "http" }}
    print("Connecting to {{ include "qdrant.fullname" $root }}.{{ $namespace }}:{{ .port }}")
    client = QdrantClient("{{ include "qdrant.fullname" $root }}.{{ $namespace }}", port={{ .port }})
    {{- end }}
    {{- end }}

    client.recreate_collection(
        collection_name="test_collection",
        vectors_config=VectorParams(size=4, distance=Distance.DOT),
    )

    operation_info = client.upsert(
      collection_name="test_collection",
      wait=True,
      points=[
        PointStruct(id=1, vector=[0.05, 0.61, 0.76, 0.74], payload={"city": "Berlin"}),
        PointStruct(id=2, vector=[0.19, 0.81, 0.75, 0.11], payload={"city": "London"}),
        PointStruct(id=3, vector=[0.36, 0.55, 0.47, 0.94], payload={"city": "Moscow"}),
        PointStruct(id=4, vector=[0.18, 0.01, 0.85, 0.80], payload={"city": "New York"}),
        PointStruct(id=5, vector=[0.24, 0.18, 0.22, 0.44], payload={"city": "Beijing"}),
        PointStruct(id=6, vector=[0.35, 0.08, 0.11, 0.44], payload={"city": "Mumbai"}),
        ]
    )
    print(operation_info)

    search_result = client.search(
      collection_name="test_collection",
      query_vector=[0.2, 0.1, 0.9, 0.7],
      limit=3
    )
    print(search_result)
